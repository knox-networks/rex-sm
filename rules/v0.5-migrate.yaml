id: timeout-migration
language: Rust
utils:
  timeout-call:
    kind: call_expression
    pattern: self.$TIMEOUT_METHOD($$$ARGS)
rule:
  any:
    # match method chaining like `.unwrap()` and `.map_err()`
    - kind: call_expression
      has:
        field: function
        kind: field_expression
        has:
          field: value
          matches: timeout-call
    # match try operator `$CALL?`
    - kind: try_expression
      has:
        matches: timeout-call
constraints:
  TIMEOUT_METHOD:
    kind: field_identifier
    regex: "set_timeout|cancel_timeout|set_timeout_millis"
fix: 'self.$TIMEOUT_METHOD($$$ARGS)'
---
id: notification-processor-migration
language: Rust
rule:
  kind: self_parameter
  all:
    # should be in a function named "init"...
    - inside:
        kind: function_item
        stopBy: end
        has:
          field: name
          pattern: init
    # ...AND in an impl trait where trait == NotificationProcessor
    - inside:
        kind: impl_item
        stopBy: end
        has:
          field: trait
          pattern: $NOTIFICATION_PROCESSOR
constraints:
  NOTIFICATION_PROCESSOR:
    regex: '.*NotificationProcessor<.*'
fix: '&mut self'
